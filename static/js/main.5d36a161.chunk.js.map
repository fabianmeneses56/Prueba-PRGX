{"version":3,"sources":["screens/HomeScreen.js","api/deleteTaskApi.js","api/logOutUserApi.js","api/getAllTaskApi.js","screens/LoginScreen.js","form/validations/loginValidation.js","api/loginUserApi.js","api/updateTaskApi.js","components/tableConfiguration.js","api/client.js","auth/GlobalContext.js","form/validations/addNewTaskValidation.js","api/addNewTaskApi.js","components/GoBackButtom.js","screens/NewTaskScreen.js","api/getProfile.js","screens/ProfileScreen.js","form/validations/updateProfileValidation.js","api/updateProfileApi.js","screens/ProfileSettingsScreen.js","form/validations/registerValidation.js","api/registerUserApi.js","screens/RegisterScreen.js","routers/AuthRouter.js","routers/PrivateRoute.js","routers/PublicRoute.js","routers/AppRouter.js","App.js","index.js","form/AppFormInput.js","form/AppSubmit.js"],"names":["CheckContext","createContext","HomeScreen","history","useHistory","useState","dataTable","setDataTable","selectId","setSelectId","useContext","GlobalContext","token","setToken","useEffect","getAllTaskApi","then","res","data","filterData","map","id","_id","description","completed","createdAt","updatedAt","storageLogOut","a","process","browser","window","sessionStorage","removeItem","Provider","value","className","variant","size","color","onClick","push","logOutUserApi","success","Swal","fire","event","deleteTaskApi","getRowId","row","rows","columns","pageSize","checkboxSelection","disableSelectionOnClick","taskId","apiClient","delete","headers","Accept","Authorization","post","get","initialValues","email","password","LoginScreen","saveTokenOnSessionStorage","setItem","register","onSubmit","emailValue","passwordValue","loginUserApi","ok","validationSchema","ValidationLogin","label","name","title","Yup","shape","required","min","updateTaskApi","put","defaultTheme","createTheme","useStyles","makeStyles","theme","root","display","alignItems","gap","spacing","palette","text","secondary","textPrimary","primary","field","headerName","renderCell","props","classes","check","setcheck","IconButton","sortable","width","headerAlign","filterable","align","disableColumnMenu","disableReorder","editable","api","stopPropagation","updateRows","_action","fontSize","create","baseURL","addNewTaskValidation","addNewTaskApi","descriptionValue","GoBackButtom","Button","goBack","NewTaskScreen","AppFormInput","AppSubmit","GetUserApi","orange","getContrastText","deepOrange","backgroundColor","height","ProfileScreen","dataProfile","setDataProfile","fisrtLetters","slice","Avatar","age","updateProfileValidation","updateProfileApi","nameValue","ageValue","Number","ProfileSettingsScreen","preloadedInfoFromBackend","ValidationRegister","registerUserApi","RegisterScreen","clasName","AuthRouter","exact","path","component","to","PrivateRoute","isAuthenticated","Component","rest","PublicRoute","AppRouter","App","console","log","ReactDOM","render","document","getElementById","useFormikContext","handleBlur","handleChange","setFieldValue","errors","touched","values","errorAux","visible","error","helperText","onBlur","onChange","handleSubmit","isSubmitting","type"],"mappings":"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","file":"static/js/main.5d36a161.chunk.js","sourcesContent":["import React, { useContext, useEffect, useState, createContext } from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport logOutUserApi from '../api/logOutUserApi'\r\nimport getAllTaskApi from '../api/getAllTaskApi'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport { columns } from '../components/tableConfiguration'\r\nimport deleteTaskApi from '../api/deleteTaskApi'\r\n\r\nimport '../styles/HomeScreenStyles.css'\r\n\r\nexport const CheckContext = createContext()\r\nexport const HomeScreen = () => {\r\n  const history = useHistory()\r\n\r\n  const [dataTable, setDataTable] = useState([])\r\n  const [selectId, setSelectId] = useState(null)\r\n\r\n  const { token, setToken } = useContext(GlobalContext)\r\n\r\n  useEffect(() => {\r\n    getAllTaskApi(token).then(res => setDataTable(res.data.data))\r\n  }, [token])\r\n\r\n  const filterData = dataTable.map(res => {\r\n    return {\r\n      id: res._id,\r\n      description: res.description,\r\n      completed: res.completed,\r\n      createdAt: res.createdAt,\r\n      updatedAt: res.updatedAt\r\n    }\r\n  })\r\n\r\n  const logOutSession = () => {\r\n    logOutUserApi(token).then(res => {\r\n      if (res.data.success) {\r\n        setToken(null)\r\n        storageLogOut()\r\n        return Swal.fire('success', 'LogOut successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n  }\r\n\r\n  const handleDeleteClick = event => {\r\n    deleteTaskApi(token, selectId).then(res => {\r\n      if (res.data.success) {\r\n        return Swal.fire('success', 'task deleted successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n  }\r\n\r\n  const storageLogOut = async () => {\r\n    ;(await process.browser) && window.sessionStorage.removeItem('secret_key')\r\n  }\r\n\r\n  const ViewProfile = () => {\r\n    history.push('/home/profile')\r\n  }\r\n  const ProfileSettings = () => {\r\n    history.push('/home/profileSettings')\r\n  }\r\n  const NewTask = () => {\r\n    history.push('/home/newTask')\r\n  }\r\n  return (\r\n    <div>\r\n      <CheckContext.Provider value={{ selectId, setSelectId }}>\r\n        <div className='generalContainer'>\r\n          <h3 className='textFooter'>Home</h3>\r\n          <section className='containerButtons'>\r\n            <Button\r\n              variant='contained'\r\n              size='small'\r\n              color='primary'\r\n              onClick={ProfileSettings}\r\n            >\r\n              Profile Settings\r\n            </Button>\r\n            <Button\r\n              variant='contained'\r\n              size='small'\r\n              color='primary'\r\n              onClick={ViewProfile}\r\n            >\r\n              Profile\r\n            </Button>\r\n\r\n            <Button\r\n              variant='contained'\r\n              size='small'\r\n              color='secondary'\r\n              className='WithButton'\r\n              onClick={logOutSession}\r\n            >\r\n              LogOut\r\n            </Button>\r\n            <section className='secondaryButtonsHome'>\r\n              <article className='ButonMargin'>\r\n                <Button variant='contained' color='primary' onClick={NewTask}>\r\n                  New Task\r\n                  <AddIcon />\r\n                </Button>\r\n              </article>\r\n\r\n              <Button\r\n                variant='contained'\r\n                color='secondary'\r\n                onClick={handleDeleteClick}\r\n              >\r\n                Remove Selected\r\n                <DeleteIcon />\r\n              </Button>\r\n            </section>\r\n          </section>\r\n          <section className='tableContainer'>\r\n            <DataGrid\r\n              getRowId={row => row.id}\r\n              rows={filterData}\r\n              columns={columns}\r\n              pageSize={5}\r\n              checkboxSelection={false}\r\n              disableSelectionOnClick\r\n            />\r\n          </section>\r\n          <footer className='FooterContainerHome'>\r\n            <h3 className='textFooter'>Footer</h3>\r\n          </footer>\r\n        </div>\r\n      </CheckContext.Provider>\r\n    </div>\r\n  )\r\n}\r\n","import { apiClient } from './client'\r\n\r\nconst deleteTaskApi = (token, taskId) => {\r\n  return apiClient.delete(\r\n    `/task/${taskId}`,\r\n    {},\r\n    {\r\n      headers: { Accept: 'application/json', Authorization: `Bearer ${token}` }\r\n    }\r\n  )\r\n}\r\n\r\nexport default deleteTaskApi\r\n","import { apiClient } from './client'\r\n\r\nconst logOutUserApi = token => {\r\n  return apiClient.post(\r\n    `/user/logout`,\r\n    {},\r\n    { headers: { Authorization: `Bearer ${token}` } }\r\n  )\r\n}\r\n\r\nexport default logOutUserApi\r\n","import { apiClient } from './client'\r\n\r\nconst getAllTaskApi = token => {\r\n  return apiClient.get(\r\n    `/task`,\r\n    {},\r\n    {\r\n      headers: { Accept: 'application/json', Authorization: `Bearer ${token}` }\r\n    }\r\n  )\r\n}\r\n\r\nexport default getAllTaskApi\r\n","import React, { useContext } from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { Formik, Form } from 'formik'\r\nimport Swal from 'sweetalert2'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nimport { AppFormInput } from '../form/AppFormInput'\r\nimport { AppSubmit } from '../form/AppSubmit'\r\nimport { ValidationLogin } from '../form/validations/loginValidation'\r\nimport loginUserApi from '../api/loginUserApi'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\n\r\nimport '../styles/LoginScreen.css'\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: ''\r\n}\r\nexport const LoginScreen = () => {\r\n  const { setToken } = useContext(GlobalContext)\r\n  const history = useHistory()\r\n  const onSubmit = ({ email: emailValue, password: passwordValue }) => {\r\n    loginUserApi(emailValue, passwordValue).then(res => {\r\n      if (res.ok) {\r\n        setToken(res.data.token)\r\n        saveTokenOnSessionStorage(res.data.token)\r\n        return Swal.fire('success', 'successfully logged in', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n  }\r\n\r\n  const saveTokenOnSessionStorage = value => {\r\n    if (process.browser) {\r\n      window.sessionStorage.setItem('secret_key', value)\r\n    }\r\n  }\r\n  const register = () => {\r\n    history.push('/auth/register')\r\n  }\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={ValidationLogin}\r\n    >\r\n      {() => {\r\n        return (\r\n          <Form>\r\n            <div className='Container'>\r\n              <section className='sectionContainer'>\r\n                <AppFormInput label='Email' name='email' />\r\n                <AppFormInput label='password' name='password' />\r\n\r\n                <article className='ButtonsContainer'>\r\n                  <AppSubmit title='login' />\r\n                  <Button\r\n                    variant='contained'\r\n                    size='small'\r\n                    color='primary'\r\n                    className='WithButton'\r\n                    onClick={register}\r\n                  >\r\n                    Signup\r\n                  </Button>\r\n                </article>\r\n              </section>\r\n              <footer className='FooterContainer'>\r\n                <h3 className='textFooter'>Footer</h3>\r\n              </footer>\r\n            </div>\r\n          </Form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const ValidationLogin = Yup.object().shape({\r\n  password: Yup.string()\r\n    .required('password is required.')\r\n    .min(7, 'minimum 7 characters'),\r\n  email: Yup.string().required('email is required.')\r\n})\r\n","import { apiClient } from './client'\r\n\r\nconst loginUserApi = (emailValue, passwordValue) => {\r\n  return apiClient.post(\r\n    `/user/login`,\r\n    {\r\n      email: emailValue,\r\n      password: passwordValue\r\n    },\r\n    { headers: { Accept: 'application/json' } }\r\n  )\r\n}\r\n\r\nexport default loginUserApi\r\n","import { apiClient } from './client'\r\n\r\nconst updateTaskApi = (token, taskId) => {\r\n  return apiClient.put(\r\n    `/task/${taskId}`,\r\n    {\r\n      completed: true\r\n    },\r\n    {\r\n      headers: { Accept: 'application/json', Authorization: `Bearer ${token}` }\r\n    }\r\n  )\r\n}\r\n\r\nexport default updateTaskApi\r\n","import React, { useContext, useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Swal from 'sweetalert2'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport EditIcon from '@material-ui/icons/Edit'\r\nimport DeleteIcon from '@material-ui/icons/DeleteOutlined'\r\nimport { createTheme } from '@material-ui/core/styles'\r\nimport { makeStyles } from '@material-ui/styles'\r\nimport CheckBoxOutlineBlankIcon from '@material-ui/icons/CheckBoxOutlineBlank'\r\nimport CheckBoxIcon from '@material-ui/icons/CheckBox'\r\n\r\nimport updateTaskApi from '../api/updateTaskApi'\r\nimport deleteTaskApi from '../api/deleteTaskApi'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport { CheckContext } from '../screens/HomeScreen'\r\n\r\nconst defaultTheme = createTheme()\r\nconst useStyles = makeStyles(\r\n  theme => ({\r\n    root: {\r\n      display: 'inline-flex',\r\n      alignItems: 'center',\r\n      gap: theme.spacing(1),\r\n      color: theme.palette.text.secondary\r\n    },\r\n    textPrimary: {\r\n      color: theme.palette.text.primary\r\n    }\r\n  }),\r\n  { defaultTheme }\r\n)\r\n\r\nexport const columns = [\r\n  {\r\n    field: 'check',\r\n    headerName: 'Check',\r\n    renderCell: RowCheckBox,\r\n    sortable: false,\r\n    width: 180,\r\n    headerAlign: 'center',\r\n    filterable: false,\r\n    align: 'center',\r\n    disableColumnMenu: true,\r\n    disableReorder: true\r\n  },\r\n  {\r\n    field: 'description',\r\n    headerName: 'Description',\r\n    width: 150,\r\n    editable: false,\r\n    headerAlign: 'center',\r\n    align: 'center'\r\n  },\r\n  {\r\n    field: 'completed',\r\n    headerName: 'Completed',\r\n    width: 150,\r\n    editable: false,\r\n    headerAlign: 'center',\r\n    align: 'center'\r\n  },\r\n  {\r\n    field: 'createdAt',\r\n    headerName: 'Created at',\r\n    width: 200,\r\n    editable: false,\r\n    headerAlign: 'center',\r\n    align: 'center'\r\n  },\r\n  {\r\n    field: 'updatedAt',\r\n    headerName: 'Updated at',\r\n    editable: false,\r\n    width: 200,\r\n    headerAlign: 'center',\r\n    align: 'center'\r\n  },\r\n  {\r\n    field: 'actions',\r\n    headerName: 'Actions',\r\n    renderCell: RowMenuCell,\r\n    sortable: false,\r\n    width: 180,\r\n    headerAlign: 'center',\r\n    filterable: false,\r\n    align: 'center',\r\n    disableColumnMenu: true,\r\n    disableReorder: true\r\n  }\r\n]\r\n\r\nexport function RowMenuCell(props) {\r\n  const { api, id } = props\r\n  const { token } = useContext(GlobalContext)\r\n  const classes = useStyles()\r\n\r\n  const handleEditClick = event => {\r\n    updateTaskApi(token, id).then(res => {\r\n      if (res.data.success) {\r\n        return Swal.fire('success', 'task updated successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n    event.stopPropagation()\r\n    api.updateRows([{ id, _action: 'update' }])\r\n  }\r\n\r\n  const handleDeleteClick = event => {\r\n    deleteTaskApi(token, id).then(res => {\r\n      if (res.data.success) {\r\n        return Swal.fire('success', 'task deleted successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n\r\n    event.stopPropagation()\r\n    api.updateRows([{ id, _action: 'delete' }])\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        color='inherit'\r\n        className={classes.textPrimary}\r\n        size='small'\r\n        aria-label='edit'\r\n        onClick={handleEditClick}\r\n      >\r\n        <EditIcon fontSize='small' />\r\n      </IconButton>\r\n      <IconButton\r\n        color='inherit'\r\n        size='small'\r\n        aria-label='delete'\r\n        onClick={handleDeleteClick}\r\n      >\r\n        <DeleteIcon fontSize='small' />\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\nfunction RowCheckBox(props) {\r\n  const { id } = props\r\n  const classes = useStyles()\r\n  const { setSelectId } = useContext(CheckContext)\r\n  const [check, setcheck] = useState(false)\r\n\r\n  const handleEnd = event => {\r\n    setcheck(!check)\r\n    setSelectId(id)\r\n  }\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        color='inherit'\r\n        className={classes.textPrimary}\r\n        size='small'\r\n        aria-label='edit'\r\n        onClick={handleEnd}\r\n      >\r\n        {check ? <CheckBoxIcon /> : <CheckBoxOutlineBlankIcon />}\r\n      </IconButton>\r\n    </div>\r\n  )\r\n}\r\n\r\nRowMenuCell.propTypes = {\r\n  api: PropTypes.object.isRequired,\r\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\r\n}\r\nRowCheckBox.propTypes = {\r\n  api: PropTypes.object.isRequired,\r\n  id: PropTypes.oneOfType([PropTypes.number, PropTypes.string]).isRequired\r\n}\r\n","import { create } from 'apisauce'\r\n\r\nexport const apiClient = create({\r\n  baseURL: 'https://api-nodejs-todolist.herokuapp.com'\r\n})\r\n","import { createContext } from 'react'\r\n\r\nexport const GlobalContext = createContext()\r\n","import * as Yup from 'yup'\r\n\r\nexport const addNewTaskValidation = Yup.object().shape({\r\n  description: Yup.string().required('description is required.')\r\n})\r\n","import { apiClient } from './client'\r\n\r\nconst addNewTaskApi = (descriptionValue, token) => {\r\n  return apiClient.post(\r\n    `/task`,\r\n    {\r\n      description: descriptionValue\r\n    },\r\n    {\r\n      headers: { Accept: 'application/json', Authorization: `Bearer ${token}` }\r\n    }\r\n  )\r\n}\r\n\r\nexport default addNewTaskApi\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const GoBackButtom = () => {\r\n  const history = useHistory()\r\n  const goBack = () => {\r\n    history.goBack()\r\n  }\r\n  return (\r\n    <Button variant='contained' color='secondary' onClick={goBack} size='small'>\r\n      Go back\r\n    </Button>\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport { AppFormInput } from '../form/AppFormInput'\r\nimport { AppSubmit } from '../form/AppSubmit'\r\nimport { addNewTaskValidation } from '../form/validations/addNewTaskValidation'\r\nimport addNewTaskApi from '../api/addNewTaskApi'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport { GoBackButtom } from '../components/GoBackButtom'\r\n\r\nconst initialValues = {\r\n  description: ''\r\n}\r\n\r\nexport const NewTaskScreen = () => {\r\n  const { token } = useContext(GlobalContext)\r\n  const onSubmit = ({ description: descriptionValue }) => {\r\n    addNewTaskApi(descriptionValue, token).then(res => {\r\n      if (res.ok) {\r\n        return Swal.fire('success', 'Task created successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={addNewTaskValidation}\r\n    >\r\n      {() => {\r\n        return (\r\n          <div className='generalContainer'>\r\n            <div>\r\n              <GoBackButtom />\r\n              <h3 className='textFooter'>New Task</h3>\r\n            </div>\r\n            <Form>\r\n              <div className='Container'>\r\n                <section className='sectionContainer'>\r\n                  <AppFormInput label='description' name='description' />\r\n\r\n                  <article className='ButtonsContainer'>\r\n                    <AppSubmit title='Add Task' />\r\n                  </article>\r\n                </section>\r\n                <footer className='FooterContainer'>\r\n                  <h3 className='textFooter'>Footer</h3>\r\n                </footer>\r\n              </div>\r\n            </Form>\r\n          </div>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n","import { apiClient } from './client'\r\n\r\nconst GetUserApi = token => {\r\n  return apiClient.get(\r\n    `/user/me`,\r\n    {},\r\n    { headers: { Authorization: `Bearer ${token}` } }\r\n  )\r\n}\r\n\r\nexport default GetUserApi\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { Avatar } from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nimport GetUserApi from '../api/getProfile'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport { GoBackButtom } from '../components/GoBackButtom'\r\nimport { deepOrange } from '@material-ui/core/colors'\r\n\r\nimport '../styles/ProfileStyles.css'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  orange: {\r\n    color: theme.palette.getContrastText(deepOrange[500]),\r\n    backgroundColor: deepOrange[500],\r\n    width: 60,\r\n    height: 60\r\n  }\r\n}))\r\nexport const ProfileScreen = () => {\r\n  const { token } = useContext(GlobalContext)\r\n  const [dataProfile, setDataProfile] = useState([])\r\n  const classes = useStyles()\r\n  useEffect(() => {\r\n    GetUserApi(token).then(res => setDataProfile(res.data))\r\n  }, [token])\r\n  const fisrtLetters = dataProfile.name ? dataProfile.name.slice(0, 2) : []\r\n\r\n  return (\r\n    <div className='generalContainer'>\r\n      <div>\r\n        <GoBackButtom />\r\n        <h3 className='textFooter'>New Task</h3>\r\n      </div>\r\n      <div className='Contaier'>\r\n        <section className='ContainerSectionWelcome'>\r\n          <h3>Hi {dataProfile.name}</h3>\r\n          <h3>we are very happy to have you back</h3>\r\n        </section>\r\n        <section className='ContainerInfo'>\r\n          <article className='AvatarContainer'>\r\n            <Avatar className={classes.orange}>{fisrtLetters}</Avatar>\r\n          </article>\r\n          <article className='InsideContainer'>\r\n            <h3 className='TextInfo'>Name : {dataProfile.name}</h3>\r\n            <h3 className='TextInfo'>Email : {dataProfile.email}</h3>\r\n            <h3 className='TextInfo'>Age: {dataProfile.age}</h3>\r\n          </article>\r\n        </section>\r\n      </div>\r\n      <footer className='FooterContainer'>\r\n        <h3 className='textFooter'>Footer</h3>\r\n      </footer>\r\n    </div>\r\n  )\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const updateProfileValidation = Yup.object().shape({\r\n  name: Yup.string().required('Name is required.'),\r\n  age: Yup.string().required('Age is required.')\r\n})\r\n","import { apiClient } from './client'\r\n\r\nconst updateProfileApi = (nameValue, ageValue, token) => {\r\n  return apiClient.put(\r\n    `/user/me`,\r\n    {\r\n      name: nameValue,\r\n      age: Number(ageValue)\r\n    },\r\n    {\r\n      headers: { Accept: 'application/json', Authorization: `Bearer ${token}` }\r\n    }\r\n  )\r\n}\r\n\r\nexport default updateProfileApi\r\n","import React, { useContext, useState, useEffect } from 'react'\r\nimport { Formik, Form } from 'formik'\r\nimport Swal from 'sweetalert2'\r\n\r\nimport { AppFormInput } from '../form/AppFormInput'\r\nimport { AppSubmit } from '../form/AppSubmit'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport GetUserApi from '../api/getProfile'\r\nimport { updateProfileValidation } from '../form/validations/updateProfileValidation'\r\nimport updateProfileApi from '../api/updateProfileApi'\r\nimport { GoBackButtom } from '../components/GoBackButtom'\r\n\r\nconst initialValues = {\r\n  name: '',\r\n  age: ''\r\n}\r\n\r\nexport const ProfileSettingsScreen = () => {\r\n  const { token } = useContext(GlobalContext)\r\n  const [dataProfile, setDataProfile] = useState([])\r\n\r\n  useEffect(() => {\r\n    GetUserApi(token).then(res => setDataProfile(res.data))\r\n  }, [token])\r\n\r\n  const onSubmit = ({ name: nameValue, age: ageValue }) => {\r\n    updateProfileApi(nameValue, ageValue, token).then(res => {\r\n      if (res.ok) {\r\n        return Swal.fire('success', 'user updated successfully', 'success')\r\n      } else {\r\n        return Swal.fire('Error', 'An error has occurred', 'error')\r\n      }\r\n    })\r\n  }\r\n  return (\r\n    <div className='generalContainer'>\r\n      <div>\r\n        <GoBackButtom />\r\n        <h3 className='textFooter'>Profile Settings</h3>\r\n      </div>\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validationSchema={updateProfileValidation}\r\n      >\r\n        {() => {\r\n          return (\r\n            <Form>\r\n              <div className='Container'>\r\n                <section className='sectionContainer'>\r\n                  <AppFormInput\r\n                    label='Name'\r\n                    name='name'\r\n                    preloadedInfoFromBackend={dataProfile.name}\r\n                  />\r\n                  <AppFormInput\r\n                    label='Age'\r\n                    name='age'\r\n                    preloadedInfoFromBackend={dataProfile.age}\r\n                  />\r\n\r\n                  <article className='ButtonsContainer'>\r\n                    <AppSubmit title=' Edit Profile' />\r\n                  </article>\r\n                </section>\r\n                <footer className='FooterContainer'>\r\n                  <h3 className='textFooter'>Footer</h3>\r\n                </footer>\r\n              </div>\r\n            </Form>\r\n          )\r\n        }}\r\n      </Formik>\r\n    </div>\r\n  )\r\n}\r\n","import * as Yup from 'yup'\r\n\r\nexport const ValidationRegister = Yup.object().shape({\r\n  password: Yup.string()\r\n    .required('password is required.')\r\n    .min(7, 'minimum 7 characters'),\r\n  email: Yup.string().required('email is required.'),\r\n  name: Yup.string().required('Name is required.'),\r\n  age: Yup.string().required('Age is required.')\r\n})\r\n","import { apiClient } from './client'\r\n\r\nconst registerUserApi = (nameValue, emailValue, passwordValue, ageValue) => {\r\n  return apiClient.post(\r\n    `/user/register`,\r\n    {\r\n      name: nameValue,\r\n      email: emailValue,\r\n      password: passwordValue,\r\n      age: Number(ageValue)\r\n    },\r\n    { headers: { Accept: 'application/json' } }\r\n  )\r\n}\r\n\r\nexport default registerUserApi\r\n","import React from 'react'\r\nimport Swal from 'sweetalert2'\r\nimport { Formik, Form } from 'formik'\r\n\r\nimport { AppFormInput } from '../form/AppFormInput'\r\nimport { AppSubmit } from '../form/AppSubmit'\r\nimport { ValidationRegister } from '../form/validations/registerValidation'\r\nimport registerUserApi from '../api/registerUserApi'\r\nimport '../styles/LoginScreen.css'\r\nimport { GoBackButtom } from '../components/GoBackButtom'\r\n\r\nconst initialValues = {\r\n  email: '',\r\n  password: '',\r\n  name: '',\r\n  age: ''\r\n}\r\n\r\nexport const RegisterScreen = () => {\r\n  const onSubmit = ({\r\n    email: emailValue,\r\n    password: passwordValue,\r\n    name: nameValue,\r\n    age: ageValue\r\n  }) => {\r\n    registerUserApi(nameValue, emailValue, passwordValue, ageValue).then(\r\n      res => {\r\n        if (res.ok) {\r\n          return Swal.fire('success', 'registered user', 'success')\r\n        } else {\r\n          return Swal.fire('Error', 'An error has occurred', 'error')\r\n        }\r\n      }\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={ValidationRegister}\r\n    >\r\n      {() => {\r\n        return (\r\n          <Form>\r\n            <div className='Container'>\r\n              <div clasName='backRegister'>\r\n                <GoBackButtom />\r\n              </div>\r\n\r\n              <section className='sectionContainer'>\r\n                <AppFormInput label='Name' name='name' />\r\n                <AppFormInput label='Age' name='age' />\r\n                <AppFormInput label='Email' name='email' />\r\n                <AppFormInput label='password' name='password' />\r\n\r\n                <article className='ButtonsContainer'>\r\n                  <AppSubmit title=' Signup' />\r\n                </article>\r\n              </section>\r\n              <footer className='FooterContainer'>\r\n                <h3 className='textFooter'>Footer</h3>\r\n              </footer>\r\n            </div>\r\n          </Form>\r\n        )\r\n      }}\r\n    </Formik>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Switch, Route, Redirect } from 'react-router-dom'\r\nimport { LoginScreen } from '../screens/LoginScreen'\r\nimport { RegisterScreen } from '../screens/RegisterScreen'\r\n\r\nexport const AuthRouter = () => {\r\n  return (\r\n    <div>\r\n      <div>\r\n        <Switch>\r\n          <Route exact path='/auth/login' component={LoginScreen} />\r\n\r\n          <Route exact path='/auth/register' component={RegisterScreen} />\r\n\r\n          <Redirect to='/auth/login' />\r\n        </Switch>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport const PrivateRoute = ({\r\n  isAuthenticated,\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      component={props =>\r\n        isAuthenticated ? (\r\n          <Component {...props} />\r\n        ) : (\r\n          <Redirect to='/auth/login' />\r\n        )\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Route, Redirect } from 'react-router-dom'\r\n\r\nexport const PublicRoute = ({\r\n  isAuthenticated,\r\n  component: Component,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <Route\r\n      {...rest}\r\n      component={props =>\r\n        isAuthenticated ? <Redirect to='/' /> : <Component {...props} />\r\n      }\r\n    />\r\n  )\r\n}\r\n","import React, { useContext } from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\nimport { GlobalContext } from '../auth/GlobalContext'\r\nimport { HomeScreen } from '../screens/HomeScreen'\r\nimport { NewTaskScreen } from '../screens/NewTaskScreen'\r\nimport { ProfileScreen } from '../screens/ProfileScreen'\r\nimport { ProfileSettingsScreen } from '../screens/ProfileSettingsScreen'\r\nimport { AuthRouter } from './AuthRouter'\r\nimport { PrivateRoute } from './PrivateRoute'\r\nimport { PublicRoute } from './PublicRoute'\r\nexport const AppRouter = () => {\r\n  const { token } = useContext(GlobalContext)\r\n\r\n  return (\r\n    <Router>\r\n      <div>\r\n        <Switch>\r\n          <PublicRoute\r\n            path='/auth'\r\n            component={AuthRouter}\r\n            isAuthenticated={token}\r\n          />\r\n\r\n          <PrivateRoute\r\n            exact\r\n            path='/'\r\n            component={HomeScreen}\r\n            isAuthenticated={token}\r\n          />\r\n          <Route exact path='/home/profile' component={ProfileScreen} />\r\n          <Route\r\n            exact\r\n            path='/home/profileSettings'\r\n            component={ProfileSettingsScreen}\r\n          />\r\n          <Route exact path='/home/newTask' component={NewTaskScreen} />\r\n\r\n          <Redirect to='/auth/login' />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n","import { useState } from 'react'\r\nimport { GlobalContext } from './auth/GlobalContext'\r\nimport { AppRouter } from './routers/AppRouter'\r\n\r\nfunction App() {\r\n  const [token, setToken] = useState(null)\r\n  console.log(token)\r\n  return (\r\n    <>\r\n      <GlobalContext.Provider\r\n        value={{\r\n          token,\r\n          setToken\r\n        }}\r\n      >\r\n        <AppRouter />\r\n      </GlobalContext.Provider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default App\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\n\r\nReactDOM.render(\r\n  <App />,\r\n\r\n  document.getElementById('root')\r\n)\r\n","/* eslint-disable react-hooks/exhaustive-deps */\r\nimport React, { useEffect } from 'react'\r\nimport { useFormikContext } from 'formik'\r\nimport { TextField } from '@material-ui/core'\r\n\r\nexport const AppFormInput = ({ label, name, preloadedInfoFromBackend }) => {\r\n  const { handleBlur, handleChange, setFieldValue, errors, touched, values } =\r\n    useFormikContext()\r\n\r\n  // If preloadedInfoFromBackend, setting initials values on formik\r\n  useEffect(() => {\r\n    if (preloadedInfoFromBackend) {\r\n      setFieldValue(name, preloadedInfoFromBackend)\r\n    }\r\n  }, [preloadedInfoFromBackend])\r\n\r\n  const errorAux = errors[name]\r\n  const visible = touched[name]\r\n  return (\r\n    <>\r\n      {!errorAux || !visible ? (\r\n        <TextField\r\n          id='standard-basic'\r\n          label={label}\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values[name]}\r\n          name={name}\r\n        />\r\n      ) : (\r\n        <TextField\r\n          error\r\n          id='standard-basic'\r\n          label='Error'\r\n          helperText={errorAux}\r\n          onBlur={handleBlur}\r\n          onChange={handleChange}\r\n          value={values[name]}\r\n          name={name}\r\n        />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Button } from '@material-ui/core'\r\nimport { useFormikContext } from 'formik'\r\n\r\nexport const AppSubmit = ({ title, isSubmitting }) => {\r\n  const { handleSubmit } = useFormikContext()\r\n\r\n  return (\r\n    <Button\r\n      variant='contained'\r\n      size='small'\r\n      color='primary'\r\n      onClick={handleSubmit}\r\n      type='submit'\r\n    >\r\n      {title}\r\n    </Button>\r\n  )\r\n}\r\n"],"sourceRoot":""}